<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: zh | Coding Honor]]></title>
  <link href="http://blog.codinghonor.com/categories/zh/atom.xml" rel="self"/>
  <link href="http://blog.codinghonor.com/"/>
  <updated>2015-03-30T22:30:13+08:00</updated>
  <id>http://blog.codinghonor.com/</id>
  <author>
    <name><![CDATA[武藏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式中的IP提取与质数判断]]></title>
    <link href="http://blog.codinghonor.com/2015/03/03/ip-and-prime-regular-expression-match/"/>
    <updated>2015-03-03T13:05:59+08:00</updated>
    <id>http://blog.codinghonor.com/2015/03/03/ip-and-prime-regular-expression-match</id>
    <content type="html"><![CDATA[<p>本文介绍两个正则表达式的应用实例，希望能有所帮助。</p>

<h2>IP提取</h2>

<p>判断IP是否合法的正则表达式网络上有很多，一般只需注意IP的数值边界就可以。以下就是Java中该类正则表达式的写法：</p>

<p><code>java
((2[0-4]\\d|25[0-5]|1\\d\\d|\\d\\d?)\\.){3}(2[0-4]\\d|25\\d|1\\d\\d|\\d\\d?)
</code></p>

<p>但直接用上面的正则表达式抽取文本文件中的IP存在一个问题，虽然这里考虑了0-255边界的问题，但诸如“Current IP: 2255.0.0.1”中的“2255.0.0.1”还是会以“255.0.0.1”的方式被抽取出来。实际上这是一个不合法的IP，并不应该被匹配。</p>

<p>为了解决这个问题，考虑过用正则表达式中的零宽度匹配。不过这里给出的是另外一种解决方案，利用正则分组的方式。代码如下：</p>

<p>``` java IP Extract
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;</p>

<p>public class Test {</p>

<pre><code>List&lt;String&gt; extract(String line) {
    List&lt;String&gt; ret = new ArrayList&lt;&gt;();
    if (line != null) {
        String regex = "(^|[^\\d])(((2[0-4]\\d|25[0-5]|1\\d\\d|\\d\\d?)\\.){3}(2[0-4]\\d|25\\d|1\\d\\d|\\d\\d?))";
        Pattern p = Pattern.compile(regex);
        Matcher m = p.matcher(line);
        while (m.find()) {
            ret.add(m.group(2));
        }
    }
    return ret;
}

public static void main(String[] args) {
    String line = "Current IP: 192.168.1.1, 2255.0.0.1 and 1.0.0.0";
    System.out.println(new Test().extract(line));
}
</code></pre>

<p>}
```</p>

<p><code>java Console Result
[192.168.1.1, 1.0.0.0]
</code></p>

<h2>质数判断</h2>

<p>除了常规的字符串抽取以外，正则表达式还可以做一些以前我根本没有想到过的事情，比如这里的质数判断。</p>

<p>``` java Prime Valid
boolean valid(int num) {</p>

<pre><code>return num &gt;= 0 &amp;&amp; !String.format("%0" + num + "d", 0).matches("^0?$|^(00+?)\\1+$");
</code></pre>

<p>}
```</p>

<p>利用的是能否被其它数整除来做，思路挺巧妙的。具体解释这里就不作说明了，网络上有大量的介绍文章。每次看到这种近乎于炫技的代码，自己虽然不排斥，但过后总会思考，这些到底算不算茴香豆的四种写法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Morris二叉树遍历算法]]></title>
    <link href="http://blog.codinghonor.com/2014/11/26/morris-traversal/"/>
    <updated>2014-11-26T18:08:46+08:00</updated>
    <id>http://blog.codinghonor.com/2014/11/26/morris-traversal</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>二叉树的前中后序遍历算法是计算机领域的基础算法，一般采用递归或者栈来实现。时间复杂度为O(n)，空间复杂度为O(logn)。1968年，Knuth提出说能否将该问题的空间复杂度压缩到O(1)，同时原树的结构不能改变。大约十年后，1979年，Morris在《Traversing Binary Trees Simply and Cheaply》这篇论文中用一种Threaded Binary Tree的方法解决了该问题。</p>

<h2>Threaded Binary Tree</h2>

<p>为了实现O(1)空间复杂度的遍历，Threaded Binary Tree对普通二叉树进行了一些改造，将每一个节点在中序遍历时的前驱节点的右子树指向自己。说起来比较绕口，不过参考下面的示意图就会马上明白是怎么回事。</p>

<p><img src="/images/2014/threaded_binary_tree.jpg"></p>

<p>Morris算法在遍历过程中动态的构建Threaded Binary Tree，同时在结束时又将树恢复原样，在满足O(1)空间复杂度的同时也恰好满足Knuth对树结构不能改变的要求。</p>

<h2>前序与中序遍历</h2>

<p>下面给出前序遍历的Morris实现，程序最核心的部分是寻找每个节点的前驱节点，并根据前驱节点右子树是否为空来决定当前节点是否被访问过。</p>

<p>``` java Preorder Traversal
List<Integer> preOrder(TreeNode root) {</p>

<pre><code>List&lt;Integer&gt; ret = new ArrayList&lt;&gt;();
TreeNode cur = root;
while (cur != null) {
    if (cur.left == null) {
        ret.add(cur.val);
        cur = cur.right;
    } else {
        TreeNode pre = cur.left;
        while (pre.right != null &amp;&amp; pre.right != cur) {
            pre = pre.right;
        }
        if (pre.right == null) {
            pre.right = cur;
            ret.add(cur.val);// 前序遍历
            cur = cur.left;
        } else {
            pre.right = null;
            cur = cur.right;
        }
    }
}
return ret;
</code></pre>

<p>}
```</p>

<p>中序遍历与前序遍历相似，只需要将第15行的 ret.add(cur.val) 添加到第19行 cur=cur.right 的前面就可以了。掌握了前序和后序遍历的O(1)空间复杂度实现，大家可以暂时停下来想一想，我们该如何实现后序遍历？</p>

<h2>后序遍历</h2>

<p>算法思想与前序和中序遍历一致，只不过我们需要添加一个新的根节点，这个新的根节点的左子树为原树的根节点，右子树为空。假设当前节点为cur，在遍历完了cur.left的左子树以后，我们逆向遍历从cur.left到cur的中序遍历前驱节点间的所有节点，这样就可以实现cur的左子树的后序遍历。因为最开始我们添加了一个新的根节点，它的左子树是原树，所以可以保证最终我们能够得到整个树的后序遍历。</p>

<p>``` java Postorder Traversal
List<Integer> postOrder(TreeNode root) {</p>

<pre><code>List&lt;Integer&gt; ret = new ArrayList&lt;&gt;();
TreeNode cur = new TreeNode(-1);
cur.left = root;
while (cur != null) {
    if (cur.left == null) {
        cur = cur.right;
    } else {
        TreeNode pre = cur.left;
        while (pre.right != null &amp;&amp; pre.right != cur) {
            pre = pre.right;
        }
        if (pre.right == null) {
            pre.right = cur;
            cur = cur.left;
        } else {
            pre.right = null;
            reverse(cur.left);
            TreeNode node = pre;
            while (node != null) {
                ret.add(node.val);
                node = node.right;
            }
            reverse(pre);
            cur = cur.right;
        }
    }
}
return ret;
</code></pre>

<p>}
```</p>

<p>``` java Reverse
void reverse(TreeNode node) {</p>

<pre><code>TreeNode prev = null;
while (node != null) {
    TreeNode next = node.right;
    node.right = prev;
    prev = node;
    node = next;
}
</code></pre>

<p>}
```</p>

<h2>时间复杂度</h2>

<p>表面上看我们的程序中包含有两层的while循环，但实际上Morris算法的时间复杂度仍然是O(n)。对于前序和中序遍历，假设有n个节点，二叉树中的n-1条边每条边最多被访问2次。第一次是确定当前节点的前驱节点，第二次是从前驱节点返回到当前节点以后的再次访问。所以总体上来看，算法复杂度是O(2n)=O(n)。</p>

<p>对于后序遍历，因为比前序和中序遍历多了两次反转操作(reverse)，这就导致每条边最多被访问4次，最终算法复杂度是O(4n)=O(n)。</p>

<h2>总结</h2>

<p>Morris算法虽然在时间复杂度上有着系数级别的差异，但却带来了空间复杂度量级上的降低。总体看来，在某些空间苛刻的场景中，该算法非常实用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[戚继光与俞大猷]]></title>
    <link href="http://blog.codinghonor.com/2014/09/09/ji-guang-qi/"/>
    <updated>2014-09-09T15:55:24+08:00</updated>
    <id>http://blog.codinghonor.com/2014/09/09/ji-guang-qi</id>
    <content type="html"><![CDATA[<p>最近翻历史，读到对比戚继光与俞大猷的一段文字时，觉得对于今人做事也有非常的借鉴意义，摘抄分享与君：</p>

<blockquote><p>让战术全面现代化的建议，曾经被名将俞大猷提出过。他准确地指出，倭寇的特长是娴习陆战，水战的技术反而低劣。俞大猷主张，以有效的战船和火炮歼灭倭寇于海上，根本不让他们有登陆的机会。在战术原则上，在他所著的书里也明白指出：“海上战无他术，大船胜小船，大铳胜小铳，多船胜寡船，多铳胜寡铳而已。”他给总督的禀帖中，曾经请求把陆军军费的一半用来配备水师。但纵使俞大猷的声望和战绩都十分卓著，这些有益的建议却始终没有被采纳，因而壮志未酬，赍恨以殁。</p>

<p>然则俞大猷本人也不可能理解，他的建议，所牵涉的问题和将要引起的后果已经超出军备问题而及于政治。他要求亲自率领“闽广大船数百艘，兵数万”，如果一旦成为事实，有关各省的财政就要从原来小单位之间的收支而被集中管理。与之相应，这些后勤人机构的人员必须增加，而且必须一扫苟且拖沓的办事作风，保证规格和数字的准确，才能取得预期的行政效率以与现代化的军事技术相配合。而且和他们往来的各个机构，也必须同样地注重实际。然而我们这个庞大的帝国，在本质上无非是数不清的农村合并成的一个集合体，礼仪和道德代替了法律，对于违法的行为作掩饰则被认为忠厚识大体。各个机构之间的联系，从来也没有可资遵守的成文条例。俞大猷当然更不可能预见到，在未来的好几个世纪之内，上面这些情况在我们这个以农业经济为基础的国家里竟不能发生根本的改变。现代化的技术和古老的社会组织断然不能相容，要不是新的技术推动社会组织趋于精确和严密，那就是松散的社会组织扼杀新的技术，二者必居其一。</p>

<p>这种为个人力量所不可抗拒的社会因素，使俞大猷的计划毫无实现的希望。相形之下，戚继光的方案就比较现实。他没有去触动整个的国家体制，而只是脚踏实地，做他职责范围内力所能及的事。他从1559年开始招募3000名士兵。两年之后，兵员增加一倍，1562年更扩大为10000人。可是他的部队从来也没有一个后勤司令，也没有一个固定的军需处和兵工署。在整个国家机构之中，也没有委派过向他的部队作后勤供应的专职人员。他部队中的装备和武器，来源于各府县的分散供应。这种情况自然不能保持武器的质量。在戚继光的著作中，就明确提到各地所造的鸟铳铳管常有炸裂的危险，以致使士兵提心吊胆，不敢双手握铳以作精确的瞄准。有的火炮，铅弹与口径的尺寸不合；有的火炮，则导火线无法燃点。有鉴于俞大猷的壮志难伸和火器的实际情况，戚继光所拟打的战术仅仅把火器的应用限制在有限的范围内。他说：“火器为接敌之前用，不能倚为主要战具。”在练兵的后期，他规定12个人的步兵队配备鸟铳2枝，一局（相当于一连）的鸟铳手，必定要有一局的步兵“杀手”协同作战。</p></blockquote>

<p>单纯的靠理想主义做事往往非常难成，以一己之力抗衡整个庞大的规则体系其中的阻力可想而知。知不可为而为之，精神是否可嘉尚且存疑（此处多出贪恋名誉之辈），更何谈目标达成。俞大猷的计划理论上来讲对于国家军事单位的现代化大有裨益，但考虑当时国家之状况，即便要完成此项任务，沿海诸民必然多得耐受数年倭寇之苦。</p>

<p>借鉴与当下，往小可类比做手机，往大也可类比实现国家的民主化进程。万不可像海瑞那样不识大势不懂循序，最后留得一个“志大才疏”的评价，唐捐了几十年的辛苦。</p>

<p><em>摘抄自黄仁宇《万历十五年》</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[帕尔哈提]]></title>
    <link href="http://blog.codinghonor.com/2014/08/08/perhat-khaliq/"/>
    <updated>2014-08-08T00:38:35+08:00</updated>
    <id>http://blog.codinghonor.com/2014/08/08/perhat-khaliq</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/perhat-khaliq.jpg"></p>

<p><em>帕尔哈提的酸奶子乐队在德国的表演</em></p>

<p>好声音第三季上最熠熠生辉的学员肯定是帕尔哈提了，至少他打动了我。</p>

<p>在当下，每个人都不停的被灌输做人需要有梦想。虽然对多样性的包容是社会进入文明的一个标志，可即便在这种语境之下，我们对于那些表达不清楚（或者干脆没有）自己梦想的人的包容也只是停留在礼节层面而已。骨子里，整个社会更欣赏那些怀揣梦想并坚持实现的人。虽无可厚非，但也使得我们的包容白璧微瑕。</p>

<blockquote><p>“我没有什么梦想，就是很认真地做自己的事情。”</p></blockquote>

<p>帕尔哈提在好声音的舞台上朴素的表达了自己，无论是音乐还是语言。这种朴素的表达令人醍醐灌顶。没有梦想却要装作有梦想来趋同于大环境是一件非常痛苦的事情，这往往也是不自信的一种表现。当帕尔哈提坦然的说出自己没有梦想就是认真做事的时候，顿时觉得这才是一个自信内敛的人该有的样子！</p>

<blockquote><p>“99年我有个朋友问我，如果有机会去国外演出，你去哪儿？当时我跟他说德国。结果我十年以后就去德国演出了。我一直在弹、一直在唱，是梦想自己找我，不是我去找这个梦想。”</p></blockquote>

<p>所谓的人格魅力，大抵如此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[传奇克洛泽]]></title>
    <link href="http://blog.codinghonor.com/2014/07/09/klose/"/>
    <updated>2014-07-09T23:29:15+08:00</updated>
    <id>http://blog.codinghonor.com/2014/07/09/klose</id>
    <content type="html"><![CDATA[<p><img src="/images/2014/klose.jpg"></p>

<blockquote><p>梅西或者C罗那样的天赋异禀必定令人羡慕，但克洛泽式的勤奋自律却注定更能激励人心！</p></blockquote>

<p>在2014年世界杯半决赛德国对阵巴西的比赛中，克洛泽打进了自己世界杯上的第16粒进球，让他超越了罗纳尔多站在了世界的巅峰。</p>

<p>相比其他巨星，克洛泽除了体力以外其他资质并不算绝佳。而且在竞技体育行业里面，他偏偏入门又相对比较晚。21岁才签下第一份职业合同，之前没有任何系统的青训经历，是一个专业的木匠。不过这些都不能阻挡他最后成为德国战车的灵魂人物。</p>

<p>在追平罗纳尔多15球纪录时，克洛泽表演的前空翻落地并不是那么的顺利，令所有球迷唏嘘不已。可这会儿的罗纳尔多已经成了看台上的一名顾问，看着自己的队伍被德国战车冲的七零八落，他也只能有心无力。</p>

<p>克洛泽到今年36了，愈老弥坚，居然依然能在国家队和顶级联赛立足。他不断追求进步的职业态度堪称典范，值得所有人尊重。让我不禁想起了二郎，他们都是精益求精的职人典范。</p>

<p>人的成长要经历两个阶段：第一阶段是接受世界的不完美；第二阶段是接受自己的不完美。大多数人敢于接受世界的不完美，却不那么敢接受自己的不完美。至少从我的切身体会来讲，接受一个不太努力的自己是相当困难的。可事实如此，不努力就是不努力。不破不立，只有看清自己才能有所改变。</p>
]]></content>
  </entry>
  
</feed>
