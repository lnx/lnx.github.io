---
layout: post
title: "Two Sum"
date: 2014-06-10 22:34:56 +0800
comments: true
categories: ["en", "algorithm", "leetcode"]
---

**<a href="https://oj.leetcode.com/problems/two-sum/" class="external-link" target="_blank">Problem</a>**

_Given an array of integers, find two numbers such that they add up to a specific target number._

_The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based._

_You may assume that each input would have exactly one solution._

_Input: numbers={2, 7, 11, 15}, target=9_

_Output: index1=1, index2=2_

**Analysis**

Use HashMap to store the target value. Time complexity is O(n).

**Code**

{% codeblock Two Sum lang:java %}
public int[] twoSum(int[] numbers, int target) {
	int[] ret = new int[2];
	Map<Integer, Integer> map = new HashMap<Integer, Integer>();
	for (int i = 0; i < numbers.length; i++) {
		if (map.containsKey(numbers[i])) {
			ret[0] = map.get(numbers[i]) + 1;
			ret[1] = i + 1;
			break;
		} else {
			map.put(target - numbers[i], i);
		}
	}
	return ret;
}
{% endcodeblock %}
