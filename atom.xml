<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Coding Honor]]></title>
  <link href="http://blog.codinghonor.com/atom.xml" rel="self"/>
  <link href="http://blog.codinghonor.com/"/>
  <updated>2015-05-12T03:32:51+08:00</updated>
  <id>http://blog.codinghonor.com/</id>
  <author>
    <name><![CDATA[武藏]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dev Notes 01]]></title>
    <link href="http://blog.codinghonor.com/2015/05/12/dev-notes-01/"/>
    <updated>2015-05-12T01:37:18+08:00</updated>
    <id>http://blog.codinghonor.com/2015/05/12/dev-notes-01</id>
    <content type="html"><![CDATA[<p>These days I am trying my best effort to adapt to the new environment. A lot of things need to learn, a lot of people need to know.</p>

<p>During this period, I read a number of articles. Some of them are really good ones and worth to record here.</p>

<h2>git</h2>

<p>Most of my spare time is spending on reading git related articles, which is well worth. After a lot of reading, finally, I got agreed with the point of view that we should &ldquo;Commit Often, Perfect Later, Publish Once&rdquo;.</p>

<p>1 <a href="https://sethrobertson.github.io/GitBestPractices/">Commit Often, Perfect Later, Publish Once: Git Best Practices</a></p>

<p>Git is amazing for its free branching, so we&rsquo;d better make use of this. After learning from the article below, we could become a guru in git branch technology.</p>

<p>2 <a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a></p>

<p><img src="http://blog.codinghonor.com/images/2015/git-model.png"></p>

<p>At last, there is a very cool site, where we could find some really good tutorials and articles about git.</p>

<p>3 <a href="https://www.atlassian.com/git/">https://www.atlassian.com/git/</a></p>

<h2>linux performance</h2>

<p>There are many very useful tools in linux. I have a chance to use several of them during the work, like: strace, ltrace, pdb, etc.</p>

<p><img src="http://blog.codinghonor.com/images/2015/linux-observability-tools.png"></p>

<p>Above is a detailed &ldquo;Linux Performance Observability Tools&rdquo; diagram, from here:</p>

<p>5 <a href="http://www.brendangregg.com/linuxperf.html">http://www.brendangregg.com/linuxperf.html</a></p>

<h2>unit test</h2>

<p>Before joining this team, I seldom wrote unit tests. So there are lots of things I need to catch up. There are two articles about BDD test:</p>

<p>6 <a href="http://dannorth.net/introducing-bdd/">Introducing BDD</a></p>

<p>7 <a href="http://martinfowler.com/articles/mocksArentStubs.html">Mocks Aren&rsquo;t Stubs</a></p>

<h2>timing and profiling</h2>

<p>When I tried to analyze my python code, these tools (lprun, mprun, timeit, etc) in IPython help a lot.</p>

<p>8 <a href="http://pynash.org/2013/03/06/timing-and-profiling.html">Timing and Profiling in IPython</a></p>

<br>


<p>That&rsquo;s all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正则表达式中的IP提取与质数判断]]></title>
    <link href="http://blog.codinghonor.com/2015/03/03/ip-and-prime-regular-expression-match/"/>
    <updated>2015-03-03T13:05:59+08:00</updated>
    <id>http://blog.codinghonor.com/2015/03/03/ip-and-prime-regular-expression-match</id>
    <content type="html"><![CDATA[<p>本文介绍两个正则表达式的应用实例，希望能有所帮助。</p>

<h2>IP提取</h2>

<p>判断IP是否合法的正则表达式网络上有很多，一般只需注意IP的数值边界就可以。以下就是Java中该类正则表达式的写法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">((</span><span class="mi">2</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span><span class="o">]</span><span class="err">\\</span><span class="n">d</span><span class="o">|</span><span class="mi">25</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">5</span><span class="o">]|</span><span class="mi">1</span><span class="err">\\</span><span class="n">d</span><span class="err">\\</span><span class="n">d</span><span class="o">|</span><span class="err">\\</span><span class="n">d</span><span class="err">\\</span><span class="n">d</span><span class="o">?)</span><span class="err">\\</span><span class="o">.){</span><span class="mi">3</span><span class="o">}(</span><span class="mi">2</span><span class="o">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span><span class="o">]</span><span class="err">\\</span><span class="n">d</span><span class="o">|</span><span class="mi">25</span><span class="err">\\</span><span class="n">d</span><span class="o">|</span><span class="mi">1</span><span class="err">\\</span><span class="n">d</span><span class="err">\\</span><span class="n">d</span><span class="o">|</span><span class="err">\\</span><span class="n">d</span><span class="err">\\</span><span class="n">d</span><span class="o">?)</span>
</span></code></pre></td></tr></table></div></figure>


<p>但直接用上面的正则表达式抽取文本文件中的IP存在一个问题，虽然这里考虑了0-255边界的问题，但诸如“Current IP: 2255.0.0.1”中的“2255.0.0.1”还是会以“255.0.0.1”的方式被抽取出来。实际上这是一个不合法的IP，并不应该被匹配。</p>

<p>为了解决这个问题，考虑过用正则表达式中的零宽度匹配。不过这里给出的是另外一种解决方案，利用正则分组的方式。代码如下：</p>

<figure class='code'><figcaption><span>IP Extract</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.Matcher</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="nf">extract</span><span class="o">(</span><span class="n">String</span> <span class="n">line</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">line</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">String</span> <span class="n">regex</span> <span class="o">=</span> <span class="s">&quot;(^|[^\\d])(((2[0-4]\\d|25[0-5]|1\\d\\d|\\d\\d?)\\.){3}(2[0-4]\\d|25\\d|1\\d\\d|\\d\\d?))&quot;</span><span class="o">;</span>
</span><span class='line'>          <span class="n">Pattern</span> <span class="n">p</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">regex</span><span class="o">);</span>
</span><span class='line'>          <span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;Current IP: 192.168.1.1, 2255.0.0.1 and 1.0.0.0&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">Test</span><span class="o">().</span><span class="na">extract</span><span class="o">(</span><span class="n">line</span><span class="o">));</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Console Result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">1.1</span><span class="o">,</span> <span class="mf">1.0</span><span class="o">.</span><span class="mf">0.0</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h2>质数判断</h2>

<p>除了常规的字符串抽取以外，正则表达式还可以做一些以前我根本没有想到过的事情，比如这里的质数判断。</p>

<figure class='code'><figcaption><span>Prime Valid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">boolean</span> <span class="nf">valid</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">num</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%0&quot;</span> <span class="o">+</span> <span class="n">num</span> <span class="o">+</span> <span class="s">&quot;d&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">).</span><span class="na">matches</span><span class="o">(</span><span class="s">&quot;^0?$|^(00+?)\\1+$&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用的是能否被其它数整除来做，思路挺巧妙的。具体解释这里就不作说明了，网络上有大量的介绍文章。每次看到这种近乎于炫技的代码，自己虽然不排斥，但过后总会思考，这些到底算不算茴香豆的四种写法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Morris二叉树遍历算法]]></title>
    <link href="http://blog.codinghonor.com/2014/11/26/morris-traversal/"/>
    <updated>2014-11-26T18:08:46+08:00</updated>
    <id>http://blog.codinghonor.com/2014/11/26/morris-traversal</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>二叉树的前中后序遍历算法是计算机领域的基础算法，一般采用递归或者栈来实现。时间复杂度为O(n)，空间复杂度为O(logn)。1968年，Knuth提出说能否将该问题的空间复杂度压缩到O(1)，同时原树的结构不能改变。大约十年后，1979年，Morris在《Traversing Binary Trees Simply and Cheaply》这篇论文中用一种Threaded Binary Tree的方法解决了该问题。</p>

<h2>Threaded Binary Tree</h2>

<p>为了实现O(1)空间复杂度的遍历，Threaded Binary Tree对普通二叉树进行了一些改造，将每一个节点在中序遍历时的前驱节点的右子树指向自己。说起来比较绕口，不过参考下面的示意图就会马上明白是怎么回事。</p>

<p><img src="http://blog.codinghonor.com/images/2014/threaded_binary_tree.jpg"></p>

<p>Morris算法在遍历过程中动态的构建Threaded Binary Tree，同时在结束时又将树恢复原样，在满足O(1)空间复杂度的同时也恰好满足Knuth对树结构不能改变的要求。</p>

<h2>前序与中序遍历</h2>

<p>下面给出前序遍历的Morris实现，程序最核心的部分是寻找每个节点的前驱节点，并根据前驱节点右子树是否为空来决定当前节点是否被访问过。</p>

<figure class='code'><figcaption><span>Preorder Traversal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">preOrder</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  <span class="n">TreeNode</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span><span class='line'>          <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">TreeNode</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>              <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">val</span><span class="o">);</span><span class="c1">// 前序遍历</span>
</span><span class='line'>              <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>              <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>中序遍历与前序遍历相似，只需要将第15行的 ret.add(cur.val) 添加到第19行 cur=cur.right 的前面就可以了。掌握了前序和后序遍历的O(1)空间复杂度实现，大家可以暂时停下来想一想，我们该如何实现后序遍历？</p>

<h2>后序遍历</h2>

<p>算法思想与前序和中序遍历一致，只不过我们需要添加一个新的根节点，这个新的根节点的左子树为原树的根节点，右子树为空。假设当前节点为cur，在遍历完了cur.left的左子树以后，我们逆向遍历从cur.left到cur的中序遍历前驱节点间的所有节点，这样就可以实现cur的左子树的后序遍历。因为最开始我们添加了一个新的根节点，它的左子树是原树，所以可以保证最终我们能够得到整个树的后序遍历。</p>

<figure class='code'><figcaption><span>Postorder Traversal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">postOrder</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ret</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
</span><span class='line'>  <span class="n">TreeNode</span> <span class="n">cur</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>  <span class="n">cur</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">left</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">TreeNode</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>          <span class="k">while</span> <span class="o">(</span><span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="n">cur</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">(</span><span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>              <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>              <span class="n">pre</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>              <span class="n">reverse</span><span class="o">(</span><span class="n">cur</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
</span><span class='line'>              <span class="n">TreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
</span><span class='line'>              <span class="k">while</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">ret</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>              <span class="o">}</span>
</span><span class='line'>              <span class="n">reverse</span><span class="o">(</span><span class="n">pre</span><span class="o">);</span>
</span><span class='line'>              <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Reverse</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">reverse</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">TreeNode</span> <span class="n">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">node</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">TreeNode</span> <span class="n">next</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">;</span>
</span><span class='line'>      <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">prev</span><span class="o">;</span>
</span><span class='line'>      <span class="n">prev</span> <span class="o">=</span> <span class="n">node</span><span class="o">;</span>
</span><span class='line'>      <span class="n">node</span> <span class="o">=</span> <span class="n">next</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>时间复杂度</h2>

<p>表面上看我们的程序中包含有两层的while循环，但实际上Morris算法的时间复杂度仍然是O(n)。对于前序和中序遍历，假设有n个节点，二叉树中的n-1条边每条边最多被访问2次。第一次是确定当前节点的前驱节点，第二次是从前驱节点返回到当前节点以后的再次访问。所以总体上来看，算法复杂度是O(2n)=O(n)。</p>

<p>对于后序遍历，因为比前序和中序遍历多了两次反转操作(reverse)，这就导致每条边最多被访问4次，最终算法复杂度是O(4n)=O(n)。</p>

<h2>总结</h2>

<p>Morris算法虽然在时间复杂度上有着系数级别的差异，但却带来了空间复杂度量级上的降低。总体看来，在某些空间苛刻的场景中，该算法非常实用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[戚继光与俞大猷]]></title>
    <link href="http://blog.codinghonor.com/2014/09/09/ji-guang-qi/"/>
    <updated>2014-09-09T15:55:24+08:00</updated>
    <id>http://blog.codinghonor.com/2014/09/09/ji-guang-qi</id>
    <content type="html"><![CDATA[<p>最近翻历史，读到对比戚继光与俞大猷的一段文字时，觉得对于今人做事也有非常的借鉴意义，摘抄分享与君：</p>

<blockquote><p>让战术全面现代化的建议，曾经被名将俞大猷提出过。他准确地指出，倭寇的特长是娴习陆战，水战的技术反而低劣。俞大猷主张，以有效的战船和火炮歼灭倭寇于海上，根本不让他们有登陆的机会。在战术原则上，在他所著的书里也明白指出：“海上战无他术，大船胜小船，大铳胜小铳，多船胜寡船，多铳胜寡铳而已。”他给总督的禀帖中，曾经请求把陆军军费的一半用来配备水师。但纵使俞大猷的声望和战绩都十分卓著，这些有益的建议却始终没有被采纳，因而壮志未酬，赍恨以殁。</p>

<p>然则俞大猷本人也不可能理解，他的建议，所牵涉的问题和将要引起的后果已经超出军备问题而及于政治。他要求亲自率领“闽广大船数百艘，兵数万”，如果一旦成为事实，有关各省的财政就要从原来小单位之间的收支而被集中管理。与之相应，这些后勤人机构的人员必须增加，而且必须一扫苟且拖沓的办事作风，保证规格和数字的准确，才能取得预期的行政效率以与现代化的军事技术相配合。而且和他们往来的各个机构，也必须同样地注重实际。然而我们这个庞大的帝国，在本质上无非是数不清的农村合并成的一个集合体，礼仪和道德代替了法律，对于违法的行为作掩饰则被认为忠厚识大体。各个机构之间的联系，从来也没有可资遵守的成文条例。俞大猷当然更不可能预见到，在未来的好几个世纪之内，上面这些情况在我们这个以农业经济为基础的国家里竟不能发生根本的改变。现代化的技术和古老的社会组织断然不能相容，要不是新的技术推动社会组织趋于精确和严密，那就是松散的社会组织扼杀新的技术，二者必居其一。</p>

<p>这种为个人力量所不可抗拒的社会因素，使俞大猷的计划毫无实现的希望。相形之下，戚继光的方案就比较现实。他没有去触动整个的国家体制，而只是脚踏实地，做他职责范围内力所能及的事。他从1559年开始招募3000名士兵。两年之后，兵员增加一倍，1562年更扩大为10000人。可是他的部队从来也没有一个后勤司令，也没有一个固定的军需处和兵工署。在整个国家机构之中，也没有委派过向他的部队作后勤供应的专职人员。他部队中的装备和武器，来源于各府县的分散供应。这种情况自然不能保持武器的质量。在戚继光的著作中，就明确提到各地所造的鸟铳铳管常有炸裂的危险，以致使士兵提心吊胆，不敢双手握铳以作精确的瞄准。有的火炮，铅弹与口径的尺寸不合；有的火炮，则导火线无法燃点。有鉴于俞大猷的壮志难伸和火器的实际情况，戚继光所拟打的战术仅仅把火器的应用限制在有限的范围内。他说：“火器为接敌之前用，不能倚为主要战具。”在练兵的后期，他规定12个人的步兵队配备鸟铳2枝，一局（相当于一连）的鸟铳手，必定要有一局的步兵“杀手”协同作战。</p></blockquote>

<p>单纯的靠理想主义做事往往非常难成，以一己之力抗衡整个庞大的规则体系其中的阻力可想而知。知不可为而为之，精神是否可嘉尚且存疑（此处多出贪恋名誉之辈），更何谈目标达成。俞大猷的计划理论上来讲对于国家军事单位的现代化大有裨益，但考虑当时国家之状况，即便要完成此项任务，沿海诸民必然多得耐受数年倭寇之苦。</p>

<p>借鉴与当下，往小可类比做手机，往大也可类比实现国家的民主化进程。万不可像海瑞那样不识大势不懂循序，最后留得一个“志大才疏”的评价，唐捐了几十年的辛苦。</p>

<p><em>摘抄自黄仁宇《万历十五年》</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[帕尔哈提]]></title>
    <link href="http://blog.codinghonor.com/2014/08/08/perhat-khaliq/"/>
    <updated>2014-08-08T00:38:35+08:00</updated>
    <id>http://blog.codinghonor.com/2014/08/08/perhat-khaliq</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/perhat-khaliq.jpg"></p>

<p><em>帕尔哈提的酸奶子乐队在德国的表演</em></p>

<p>好声音第三季上最熠熠生辉的学员肯定是帕尔哈提了，至少他打动了我。</p>

<p>在当下，每个人都不停的被灌输做人需要有梦想。虽然对多样性的包容是社会进入文明的一个标志，可即便在这种语境之下，我们对于那些表达不清楚（或者干脆没有）自己梦想的人的包容也只是停留在礼节层面而已。骨子里，整个社会更欣赏那些怀揣梦想并坚持实现的人。虽无可厚非，但也使得我们的包容白璧微瑕。</p>

<blockquote><p>“我没有什么梦想，就是很认真地做自己的事情。”</p></blockquote>

<p>帕尔哈提在好声音的舞台上朴素的表达了自己，无论是音乐还是语言。这种朴素的表达令人醍醐灌顶。没有梦想却要装作有梦想来趋同于大环境是一件非常痛苦的事情，这往往也是不自信的一种表现。当帕尔哈提坦然的说出自己没有梦想就是认真做事的时候，顿时觉得这才是一个自信内敛的人该有的样子！</p>

<blockquote><p>“99年我有个朋友问我，如果有机会去国外演出，你去哪儿？当时我跟他说德国。结果我十年以后就去德国演出了。我一直在弹、一直在唱，是梦想自己找我，不是我去找这个梦想。”</p></blockquote>

<p>所谓的人格魅力，大抵如此。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[传奇克洛泽]]></title>
    <link href="http://blog.codinghonor.com/2014/07/09/klose/"/>
    <updated>2014-07-09T23:29:15+08:00</updated>
    <id>http://blog.codinghonor.com/2014/07/09/klose</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/klose.jpg"></p>

<blockquote><p>梅西或者C罗那样的天赋异禀必定令人羡慕，但克洛泽式的勤奋自律却注定更能激励人心！</p></blockquote>

<p>在2014年世界杯半决赛德国对阵巴西的比赛中，克洛泽打进了自己世界杯上的第16粒进球，让他超越了罗纳尔多站在了世界的巅峰。</p>

<p>相比其他巨星，克洛泽除了体力以外其他资质并不算绝佳。而且在竞技体育行业里面，他偏偏入门又相对比较晚。21岁才签下第一份职业合同，之前没有任何系统的青训经历，是一个专业的木匠。不过这些都不能阻挡他最后成为德国战车的灵魂人物。</p>

<p>在追平罗纳尔多15球纪录时，克洛泽表演的前空翻落地并不是那么的顺利，令所有球迷唏嘘不已。可这会儿的罗纳尔多已经成了看台上的一名顾问，看着自己的队伍被德国战车冲的七零八落，他也只能有心无力。</p>

<p>克洛泽到今年36了，愈老弥坚，居然依然能在国家队和顶级联赛立足。他不断追求进步的职业态度堪称典范，值得所有人尊重。让我不禁想起了二郎，他们都是精益求精的职人典范。</p>

<p>人的成长要经历两个阶段：第一阶段是接受世界的不完美；第二阶段是接受自己的不完美。大多数人敢于接受世界的不完美，却不那么敢接受自己的不完美。至少从我的切身体会来讲，接受一个不太努力的自己是相当困难的。可事实如此，不努力就是不努力。不破不立，只有看清自己才能有所改变。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[散列的探测次数]]></title>
    <link href="http://blog.codinghonor.com/2014/07/09/detection-number-of-hashing/"/>
    <updated>2014-07-09T00:31:20+08:00</updated>
    <id>http://blog.codinghonor.com/2014/07/09/detection-number-of-hashing</id>
    <content type="html"><![CDATA[<p>散列是一种用于以常数平均时间执行插入、删除和查找的技术，想必大家对此都非常的熟悉。但如果问每次插入、删除亦或是查找平均都需要几次探测时，不见得就有那么多人能迅速答出来了。本着Flaunt的目的，本文将会带领大家一探究竟。（这么简单的一句竟然两次目的得逞！星宿老仙，法力无边！）</p>

<p>理想的散列表数据结构只不过是一个包含有关键字的具有固定大小的数组，并将关键字从0映射到TableSize-1的数组空间中去。但有人的地方就有江湖，有数据的地方就会有冲突（我叫王家卫）。特别是当关键字数量无限数组空间大小已定时，冲突几乎是无法避免的。这时自然就需要一个专门处理冲突的大侠来主持公道了。</p>

<p>总的来看，这位大侠处理冲突一般有两种思路：</p>

<p>1.分离链接法：将所有散列到同一个值的元素保留到一个链表中，理论上可以插入任意多的元素。</p>

<p>2.开放定址法：冲突发生时，尝试选择另外的单元，直到找到为止。（大侠和的一手好稀泥！）</p>

<p><img src="http://blog.codinghonor.com/images/emoticon/ffwe.jpg"></p>

<p>直观上来看，两种散列在实现效率上必定有所差异。如何来量化这种差异，便要引入平均探测次数的概念了。这里我们以开放定址法为例进行讨论。在冲突函数的选择上，由于线性探测、平方探测或者双散列都不是本文的讨论重点，所以采用随机冲突解法（理论上最优）。另外数组中数据的多少明显也会影响到插入或者查找时所需探测的次数，所以还得引入装填因子λ的概念。我们定义散列表的装填因子λ为散列表中的元素个数与散列表大小的比值。</p>

<p>有了这些铺垫后便可以探讨随机冲突解决方式的平均探测次数了。假设有一个很大的表，并且每次探测都与前面的探测无关（其实就是想表达随机探测的意思），首先让我们来看看一次不成功查找的期望探测次数。由于空单元所占的份额为1-λ，因此我们预计要探测的单元数是1/(1-λ)。<strong>一次成功查找的探测次数等于该特定元素插入时所需要的探测次数。当一个元素被插入时，可以看成是一次不成功查找的结果。因此，我们可以使用一次不成功查找的开销来计算一次成功查找的平均开销。</strong></p>

<p>由于λ在0到当前值之间变化，早期的插入操作开销肯定较小，所以平均开销会相应有所降低，不是简单的1/(1-λ)。我们可以通过使用积分计算插入时间平均值的方法来估计平均值，最终可得：</p>

<p>$$ I(\lambda) = \frac{1}{\lambda} \int_0^\lambda \frac{1}{1-x} \mathrm{d}x = \frac{1}{\lambda} ln \frac{1}{1-\lambda} $$</p>


<p>明显小于前面的预计探测次数1/(1-λ)。根据公式，我们绘制曲线图比较了线性探测与随机冲突解决方法的性能优劣，如下图所示：</p>

<p><img src="http://blog.codinghonor.com/images/2014/detection-number-of-hashing.jpg"></p>

<p><strong>S为成功查找；U为不成功查找；而I为插入</strong></p>

<p><em>使用线性探测方法插入与不成功查找的期望探测次数为0.5*(1+1/(1-λ)<sup>2</sup>)，对于成功查找为0.5(1+1/(1-λ))，这里不做推导。</em></p>

<p>可以看出随机方法的成功查找平均探测次数显然优于线性探测方法（理论最优嘛！）。例如λ=0.5时，随机方法的成功查找平均需要1.39次探测，线性探测方法成功查找需要1.5次探测（插入需要2.5次探测）。如果λ大于0.75，线性探测所需的探测次数上升明显，已经非常不适合继续使用。这种情况下只能再散列或者使用可扩散列的办法解决散列表过满的问题。</p>

<p>打完收工！</p>

<p><em>所有内容均参考自《数据结构与算法分析 &ndash; C语言描述》</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[暴君]]></title>
    <link href="http://blog.codinghonor.com/2014/07/04/tyrant/"/>
    <updated>2014-07-04T01:46:53+08:00</updated>
    <id>http://blog.codinghonor.com/2014/07/04/tyrant</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/tyrant.jpg"></p>

<blockquote><p><em>《暴君》的创意是我见过的电视剧中最棒的一部,这部剧让我兴奋。 &mdash; 李安</em></p></blockquote>

<p>最近在看<a href="http://movie.douban.com/subject/22232279/" target="_blank">《暴君》</a>这部美剧，由《国土安全》制作人 Howard Gordon、Gideon Raff 及《迷失》制作人 Craig Wright 共同制作，讲述一个普通美国家庭被卷入中东国家暴乱的故事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分查找]]></title>
    <link href="http://blog.codinghonor.com/2014/06/24/binary-search/"/>
    <updated>2014-06-24T21:39:09+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/24/binary-search</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/knuth.jpg"></p>

<p><strong>Donald Knuth</strong> &mdash; <em>a computer scientist</em></p>

<h2>逸闻趣事</h2>

<p>计算机领域内人才济济，各路神仙竞相释放大招。创世神们的事迹就不一一列举了，单是那一个个优美的小算法，在我眼中也是一件件上古奇兵。</p>

<p>对没错，前面这段是欲扬先抑。虽然领域内的能人堪比北京的处级干部般多如牛毛，但依旧阻挡不住下面这件令我震惊的事的发生：</p>

<blockquote><p><em>Donald Knuth在叙述查找算法的历史时指出，尽管第一篇有关二分查找（折半查找）算法的文章在1946年就发布了，可16年后才有人发表了（这是一个很好的限定）能正确查找各种规模的列表算法。</em></p></blockquote>

<p>诸位感受下，这16年来的计算机界（至少是学术界），竟然连个简单的折半查找都没正确的实现出来。这至少说明有相当一部分的从业人员算法基本功是不过关的。当然，你可以说这不重要。但我觉得算法便如武侠世界中的内功，练得好绝对对以后修炼各派神功大有裨益。</p>

<p>说起老爷子，还有一段逸闻趣事值分享。当年老爷子觉得现有的排版系统不好开始制造Tex时，第一版的源码老爷子是写在一个很厚的笔记本上的！请注意，这里是一个真正意义上的纸质笔记本。</p>

<blockquote><p><em>When I wrote TeX originally in 1977 and ’78, of course I didn’t have literate programming but I did have structured programming. I wrote it in a big notebook in longhand, in pencil.</em></p>

<p><em>Six months later, after I had gone through the whole project, I started typing into the computer. And did the debugging in March of ’78 while I had started writing the program in October of ’77. The code for that is in the Stanford archives—it’s all in pencil—and of course I would come back and change a subroutine as I learned what it should be.</em></p></blockquote>

<p>看到这里时我已热泪盈眶，这六个月高老爷子到底是如何组织自己的代码的，这才应该是真正意义上的最强大脑。当然也可以理解这是一种偏执，见仁见智罢了。有时候不去过分的迷信权威其实对于破立是非常有好处的（推荐阅读王垠的<a href="http://www.yinwang.org/blog-cn/2014/01/04/authority/" target="_blank">《我和权威的故事》</a>）。</p>

<h2>那些坑</h2>

<p>回到正题，接着说二分查找。究竟这里的二分查找难在什么地方，竟引得无数英雄折腰于此！我觉得这个问题至少存在以下3个坑（对那些基本功扎实的程序员来说：空中飘来五个字，这都不是事儿！）：</p>

<p><strong>1.中值的计算方式</strong></p>

<p>这里最容易忽略的就是溢出问题。如果我们理所应当的认为，中值应该这样计算：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">high</span> <span class="o">+</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么就肯定会被这种方式甩出一条街：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，如果你用这种方式，那明显会更好一些：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里核心的问题就是在避免两数相加以后 int 溢出的问题，后面的两种方式就很好的避免了这种情况的发生。第三种方式因为采用了位运算，在速度上更优。当然，别习惯性的在这里 >>2 就可以了。</p>

<p><strong>2.选择区间是否对称</strong></p>

<p>这又是一个让很多人栽倒的地方，边界问题考虑稍微有点疏忽，很容易就会掉进坑里。假如我们这里选择定义一个闭区间的话，那应该这样写：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>相应的循环体应该是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;=</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// TODO</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，这里你也可以写成一个半开半闭的区间：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但对应的循环体就应该是这样的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// TODO</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>好多人在这里定义的时候想当然，没有仔细考虑边界，在循环条件是 &lt;= 还是 &lt; 的时候掉进了坑里。另外，如果这里采用指针的话，还存在另外一个问题，第一种闭区间的写法在计算 n-1 的时候容易指向一个无效地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="o">*</span><span class="n">low</span><span class="p">,</span> <span class="o">*</span><span class="n">high</span><span class="p">;</span>
</span><span class='line'><span class="n">low</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="n">high</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果这个时候 n 是 0 的话，那又会妥妥的掉坑里。不过，这种情况对于半开半闭区间不存在问题。</p>

<p><strong>3.重复元素的处理</strong></p>

<p>大部分人在这里理所当然的认为找到就应该直接跳出循环体，根本没有考虑到重复元素这种情况。如果要返回的是第一个元素的话，那么简单的跳出肯定有问题。</p>

<p>最终的实现如下：</p>

<figure class='code'><figcaption><span>Binary Search </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">high</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">(</span><span class="n">low</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">high</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="o">((</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="o">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">v</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">mid</span><span class="o">])</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">low</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">high</span> <span class="o">=</span> <span class="n">mid</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">high</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">&amp;&amp;</span> <span class="n">a</span><span class="o">[</span><span class="n">high</span><span class="o">]</span> <span class="o">==</span> <span class="n">v</span> <span class="o">?</span> <span class="n">high</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>小结</h2>

<p>学习各种新的技术无疑对开阔眼界大有帮助，也可以让自己的工具盒里有着各式各样顺手的工具。但基础依旧是基础，经典依旧是经典。数据结构、算法、编译器、程序语言设计、操作系统等，对这些内容掌握的熟练程度，某种意义上决定了你在整个梯队中的位置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Network Attacks]]></title>
    <link href="http://blog.codinghonor.com/2014/06/21/network-attacks/"/>
    <updated>2014-06-21T01:00:00+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/21/network-attacks</id>
    <content type="html"><![CDATA[<p>Facebook being massive DDOS attack by China showed on Norse Attack Timeline</p>

<p><img src="http://blog.codinghonor.com/images/2014/network-attack.jpg"></p>

<p>This is the <a href="https://www.youtube.com/watch?v=efmJsENgG-o" target="_blank">video</a> on youtube.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如来之由来]]></title>
    <link href="http://blog.codinghonor.com/2014/06/20/name-of-buddha/"/>
    <updated>2014-06-20T23:11:31+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/20/name-of-buddha</id>
    <content type="html"><![CDATA[<p>“阿耨楼陀，实相并不是文字言语或意念知识所能表达得到的。只有禅定所生的智慧，才可以使我们确认到实相的真绪。阿耨楼陀,你是没法用言语来表达芒果的真正味道，并让他知道是怎样的。我们只有从亲身的体验，才可以掌握到真相。这也是我时常劝比丘们不要在理论上浪费宝贵的时间，而应多实习彻观一切的原因。</p>

<p>“一切法的性体，都是‘如是’的，这是万法之妙性。莲花从‘如是’而生起，阿耨楼陀从‘如是’而起，乔达摩也从‘如是’而生。我们可以称所有从‘如是’生起者为‘如来’，一切法从‘如是’生起，又将回归何处？一切法都回归到‘如是’。归到‘如是’，也可称为‘如去’。其实，一切法都没从哪儿来或到哪儿去，因为它们的本性‘如是’。阿耨楼陀，‘如是’的更正确意思，应该是‘无从来者’和‘无所去者’。阿耨楼陀，从现在开始，我将叫自己‘如来’。我喜欢这名词，因为它可以避免因分别而生起的字眼儿，像‘我’或‘我的’。”</p>

<p>阿耨楼陀微笑说道：“我们都知道我们全都从‘如是’而生起，但我们会只让你专用‘如来’这个名号。每次当我们如此称呼你的时候，便会提醒我们所有众生都具有这无始无终的‘如来’本性。”</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高质量设计的十一个特征]]></title>
    <link href="http://blog.codinghonor.com/2014/06/19/11-characteristics-of-high-quality-design/"/>
    <updated>2014-06-19T18:24:13+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/19/11-characteristics-of-high-quality-design</id>
    <content type="html"><![CDATA[<p>如果你是一个愿意雕琢自己代码的开发者，那么你肯定会在每次开发结束以后对其进行一定的总结。因为你知道，从中得出的经验教训将会对下次的开发工作有着非常好的指导意义。当然我也不例外，并时常自满于这四五年来的经验积累。但当这些非常自我的开发经验遇到《代码大全》作者总结的高质量设计特征时，在短暂的於我心有戚戚焉之后，我陷入了一种无奈——到底还有多少知识的宝藏藏匿于整个知识的疆界中，而我却茫然不知。</p>

<p>从自我批评的角度来看，类似的问题都可以简单的归结于读书不多不广。但客观上来讲，我们其实也可以为自己找一些借口。步入现代社会以后，人类知识积累的速度越来越快。随着知识的疆界变得越来越大，如果我们在知识获取方式上没有一次革新的话，总有一天我们会惊诧于目前获取及使用知识的效率是如此之低效。也许脑机接口将是一个解决该问题的突破口，不过在类似技术还没有成熟起来之前，一些朴素的刻苦读书的道理貌似是目前唯一的解决方案。</p>

<p>看来我也能写这种翻译腔十足、内容空洞无物以及面向程序员的小品文了（<a href="http://blog.jobbole.com/all-posts/" target="_blank">重灾区在这里</a>）。回到正题，实际上下面的关于高质量设计的11个特征应该是本文的重点（内容来自《代码大全》）：</p>

<ol>
<li><p><strong>最小的复杂度</strong>（Minimal complexity） 设计的首要目标就是要让复杂度最小。要避免做出“聪明的”设计，因为“聪明的”设计常常都是难以理解的。应该做出简单且易于理解的设计。如果你的设计方案不能让你在专注于程序的一部分时安心的忽视其他部分的话，这一设计就没有什么作用了。</p></li>
<li><p><strong>易于维护</strong>（Ease of maintenance） 易于维护意味着在设计时为做维护工作的程序员着想。请时刻想着这些维护程序员可能会就你写的代码而提出的问题。把这些程序员当成你的听众，进而设计出能自明的（self-explanatory）系统来。</p></li>
<li><p><strong>松散耦合</strong>（Loose coupling） 松散耦合意味着在设计时让程序的各个组成部分之间关联最小。通过应用类接口中的合理抽象、封装性及信息隐藏等原则，设计出相互关联尽可能最小的类。减少关联也就减少了集成、测试与维护的工作量。</p></li>
<li><p><strong>可扩展性</strong>（Extensibility） 可扩展性是说你能增强系统的功能而无须破坏其底层结构。你可以改动系统的某一部分而不会影响到其他部分。越是可能发生的改动，越不会给系统造成什么破坏。</p></li>
<li><p><strong>可重用性</strong>（Reusability） 可重用性意味着所设计的系统的组成部分能在其他系统中重复使用。</p></li>
<li><p><strong>高扇入</strong>（High fan-in） 高扇入就是说让大量的累使用某个给定的类。这意味着设计出的系统很好的利用了在较低层次上的工具类（utility classes）。</p></li>
<li><p><strong>低扇出</strong>（Low fan-out） 低扇出就是说让一个类里少量或适中的使用其他的类。高扇出（超过约7个）说明一个类使用了大量其他的类，因此可能变得过于复杂。研究发现，无论考虑某个子程序调用其他子程序的里量，还是考虑某个类使用其他类的量，低扇出的原则都是有益的（Card and Glass 1990; Basili, Briand, and Melo 1996）。</p></li>
<li><p><strong>可移植性</strong>（Portability） 可移植性是说应该这样设计系统，使它能很方便的移植到其他环境中。</p></li>
<li><p><strong>精简型</strong>（Leanness） 精简型意味着设计出的系统没有多余的部分（Wirth 1995, McConnnell 1997）。伏尔泰曾说，一本书的完成，不在它不能加入任何内容的时候，而在不能再删去任何内容的时候。在软件领域中，这一观点就更正确，因为任何多余的代码也需要开发、复审和测试，并且当修改了其他代码之后还需要重新考虑它们。软件的后续版本也要和这些多余代码保持向后兼容。要问这个关键的问题：“这虽然简单，但把它加进来之后会损害什么呢？”</p></li>
<li><p><strong>层次性</strong>（Stratification） 层次性意味着尽量保持系统各个分解层的层次性，使你能在任意的层面上观察系统，并得到某种具有一致性的看法。设计出来的系统应该能在任意层次上观察而不需要进入其他层次。</p></li>
<li><p><strong>标准技术</strong>（Standard techniques） 一个系统所依赖的外来的、古怪的东西越多，别人在第一次想要理解它的时候就越是头疼。要尽量用标准化的、常用的方法，让整个系统给人一种熟悉的感觉。</p></li>
</ol>


<p>放弃那些无聊又浪费时间的小品文吧，多读领域内的经典书籍，无论是技能还是逼格都会得到极大的提升。</p>

<p>最后列上自己最近在读的两本书。与君共勉！</p>

<p><a href="http://book.douban.com/subject/1477390/" target="_blank"><em>《代码大全》</em></a></p>

<p><a href="http://book.douban.com/subject/1139426/" target="_blank"><em>《数据结构与算法分析 &ndash; C语言描述》</em></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2008 Baccalaureate Service by Drew Gilpin Faust]]></title>
    <link href="http://blog.codinghonor.com/2014/06/18/2008-baccalaureate-service-by-drew-gilpin-faust/"/>
    <updated>2014-06-18T22:21:50+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/18/2008-baccalaureate-service-by-drew-gilpin-faust</id>
    <content type="html"><![CDATA[<blockquote><p><em>&ldquo;Life is long. There is always time for Plan B. But don’t begin with it.&rdquo;</em></p></blockquote>

<p>In the curious custom of this venerable institution, I find myself standing before you expected to impart words of lasting wisdom. Here I am in a pulpit, dressed like a Puritan minister — an apparition that would have horrified many of my distinguished forebears and perhaps rededicated some of them to the extirpation of witches. This moment would have propelled Increase and Cotton into a true “Mather lather.” But here I am and there you are and it is the moment of and for Veritas.</p>

<p>You have been undergraduates for four years. I have been president for not quite one. You have known three presidents; I one senior class. Where then lies the voice of experience? Maybe you should be offering the wisdom. Perhaps our roles could be reversed and I could, in Harvard Law School style, do cold calls for the next hour or so.</p>

<p>We all do seem to have made it to this point — more or less in one piece. Though I recently learned that we have not provided you with dinner since May 22. I know we need to wean you from Harvard in a figurative sense. I never knew we took it quite so literally.</p>

<p>But let’s return to that notion of cold calls for a moment. Let’s imagine this were a baccalaureate service in the form of Q &amp; A, and you were asking the questions. “What is the meaning of life, President Faust? What were these four years at Harvard for? President Faust, you must have learned something since you graduated from college exactly 40 years ago?” (Forty years. I’ll say it out loud since every detail of my life — and certainly the year of my Bryn Mawr degree — now seems to be publicly available. But please remember I was young for my class.)</p>

<p>In a way, you have been engaging me in this Q &amp; A for the past year. On just these questions, although you have phrased them a bit more narrowly. And I have been trying to figure out how I might answer and, perhaps more intriguingly, why you were asking.</p>

<p>Let me explain. It actually began when I met with the UC just after my appointment was announced in the winter of 2007. Then the questions continued when I had lunch at Kirkland House, dinner at Leverett, when I met with students in my office hours, even with some recent graduates I encountered abroad. The first thing you asked me about wasn’t the curriculum or advising or faculty contact or even student space. In fact, it wasn’t even alcohol policy. Instead, you repeatedly asked me: Why are so many of us going to Wall Street? Why are we going in such numbers from Harvard to finance, consulting, i-banking?</p>

<p>There are a number of ways to think about this question and how to answer it. There is the Willie Sutton approach. You may know that when he was asked why he robbed banks, he replied, “Because that’s where the money is.” Professors Claudia Goldin and Larry Katz, whom many of you have encountered in your economics concentration, offer a not dissimilar answer based on their study of student career choices since the seventies. They find it notable that, given the very high pecuniary rewards in finance, many students nonetheless still choose to do something else. Indeed, 37 of you have signed on with Teach for America; one of you will dance tango and work in dance therapy in Argentina; another will be engaged in agricultural development in Kenya; another, with an honors degree in math, will study poetry; another will train as a pilot with the USAF; another will work to combat breast cancer. Numbers of you will go to law school, medical school, and graduate school. But, consistent with the pattern Goldin and Katz have documented, a considerable number of you are selecting finance and consulting. The Crimson’s survey of last year’s class reported that 58 percent of men and 43 percent of women entering the workforce made this choice. This year, even in challenging economic times, the figure is 39 percent.</p>

<p>High salaries, the all but irresistible recruiting juggernaut, the reassurance for many of you that you will be in New York working and living and enjoying life alongside your friends, the promise of interesting work — there are lots of ways to explain these choices. For some of you, it is a commitment for only a year or two in any case. Others believe they will best be able to do good by first doing well. Yet, you ask me why you are following this path.</p>

<p>I find myself in some ways less interested in answering your question than in figuring out why you are posing it. If Professors Goldin and Katz have it right; if finance is indeed the “rational choice,” why do you keep raising this issue with me? Why does this seemingly rational choice strike a number of you as not understandable, as not entirely rational, as in some sense less a free choice than a compulsion or necessity? Why does this seem to be troubling so many of you?</p>

<p>You are asking me, I think, about the meaning of life, though you have posed your question in code — in terms of the observable and measurable phenomenon of senior career choice rather than the abstract, unfathomable and almost embarrassing realm of metaphysics. The Meaning of Life — capital M, capital L — is a cliché — easier to deal with as the ironic title of a Monty Python movie or the subject of a Simpsons episode than as a matter about which one would dare admit to harboring serious concern.</p>

<p>But let’s for a moment abandon our Harvard savoir faire, our imperturbability, our pretense of invulnerability, and try to find the beginnings of some answers to your question.</p>

<p>I think you are worried because you want your lives not just to be conventionally successful, but to be meaningful, and you are not sure how those two goals fit together. You are not sure if a generous starting salary at a prestigious brand name organization together with the promise of future wealth will feed your soul.</p>

<p>Why are you worried? Partly it is our fault. We have told you from the moment you arrived here that you will be the leaders responsible for the future, that you are the best and the brightest on whom we will all depend, that you will change the world. We have burdened you with no small expectations. And you have already done remarkable things to fulfill them: your dedication to service demonstrated in your extracurricular engagements, your concern about the future of the planet expressed in your vigorous championing of sustainability, your reinvigoration of American politics through engagement in this year’s presidential contests.</p>

<p>But many of you are now wondering how these commitments fit with a career choice. Is it necessary to decide between remunerative work and meaningful work? If it were to be either/or, which would you choose? Is there a way to have both?</p>

<p>You are asking me and yourselves fundamental questions about values, about trying to reconcile potentially competing goods, about recognizing that it may not be possible to have it all. You are at a moment of transition that requires making choices. And selecting one option — a job, a career, a graduate program — means not selecting others. Every decision means loss as well as gain — possibilities foregone as well as possibilities embraced. Your question to me is partly about that — about loss of roads not taken.</p>

<p>Finance, Wall Street, “recruiting” have become the symbol of this dilemma, representing a set of issues that is much broader and deeper than just one career path. These are issues that in one way or another will at some point face you all — as you graduate from medical school and choose a specialty — family practice or dermatology, as you decide whether to use your law degree to work for a corporate firm or as a public defender, as you decide whether to stay in teaching after your two years with TFA. You are worried because you want to have both a meaningful life and a successful one; you know you were educated to make a difference not just for yourself, for your own comfort and satisfaction, but for the world around you. And now you have to figure out the way to make that possible.</p>

<p>I think there is a second reason you are worried — related to but not entirely distinct from the first. You want to be happy. You have flocked to courses like “Positive Psychology” — Psych 1504 — and “The Science of Happiness” in search of tips. But how do we find happiness? I can offer one encouraging answer: get older. Turns out that survey data show older people — that is, my age — report themselves happier than do younger ones. But perhaps you don’t want to wait.</p>

<p>As I have listened to you talk about the choices ahead of you, I have heard you articulate your worries about the relationship of success and happiness — perhaps, more accurately, how to define success so that it yields and encompasses real happiness, not just money and prestige. The most remunerative choice, you fear, may not be the most meaningful and the most satisfying. But you wonder how you would ever survive as an artist or an actor or a public servant or a high school teacher? How would you ever figure out a path by which to make your way in journalism? Would you ever find a job as an English professor after you finished who knows how many years of graduate school and dissertation writing?</p>

<p>The answer is: you won’t know till you try. But if you don’t try to do what you love — whether it is painting or biology or finance; if you don’t pursue what you think will be most meaningful, you will regret it. Life is long. There is always time for Plan B. But don’t begin with it.</p>

<p>I think of this as my parking space theory of career choice, and I have been sharing it with students for decades. Don’t park 20 blocks from your destination because you think you’ll never find a space. Go where you want to be and then circle back to where you have to be.</p>

<p>You may love investment banking or finance or consulting. It might be just right for you. Or, you might be like the senior I met at lunch at Kirkland who had just returned from an interview on the West Coast with a prestigious consulting firm. “Why am I doing this?” she asked. “I hate flying, I hate hotels, I won’t like this job.” Find work you love. It is hard to be happy if you spend more than half your waking hours doing something you don’t.</p>

<p>But what is ultimately most important here is that you are asking the question — not just of me but of yourselves. You are choosing roads and at the same time challenging your own choices. You have a notion of what you want your life to be and you are not sure the road you are taking is going to get you there. This is the best news. And it is also, I hope, to some degree, our fault. Noticing your life, reflecting upon it, considering how you can live it well, wondering how you can do good: These are perhaps the most valuable things that a liberal arts education has equipped you to do. A liberal education demands that you live self-consciously. It prepares you to seek and define the meaning inherent in all you do. It has made you an analyst and critic of yourself, a person in this way supremely equipped to take charge of your life and how it unfolds. It is in this sense that the liberal arts are liberal — as in liberare — to free. They empower you with the possibility of exercising agency, of discovering meaning, of making choices. The surest way to have a meaningful, happy life is to commit yourself to striving for it. Don’t settle. Be prepared to change routes. Remember the impossible expectations we have of you, and even as you recognize they are impossible, remember how important they are as a lodestar guiding you toward something that matters to you and to the world. The meaning of your life is for you to make.</p>

<p>I can’t wait to see how you all turn out. Do come back, from time to time, and let us know.</p>

<p><em>&ndash; Drew Gilpin Faust</em></p>

<p><em>Original link:</em> <a href="http://www.harvard.edu/president/speech/2008/2008-baccalaureate-service" target="_blank"><em>2008 Baccalaureate Service</em></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Godzilla]]></title>
    <link href="http://blog.codinghonor.com/2014/06/14/godzilla/"/>
    <updated>2014-06-14T22:57:23+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/14/godzilla</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/godzilla.jpg"></p>

<p>影片的副标题应该叫：大哥（Godzilla）从良记。前方高能预警，没看的建议还是先去看电影吧。</p>

<p>剧情实在让人难以接受，这大哥绝对是奥特曼变的。剧中打完Muto，心想你们这些看热闹的愚蠢的人类该傻眼了吧，看我大哥分分钟钟秒了你们。万万没想到，我们的大哥就这么挥一挥衣袖的走了，入水姿势还挺华丽。请冷静的告诉我，这不是奥特曼这又是什么？！追了小半个地球，我们的大哥竟然就是为了打断一对苦命鸳鸯的激情一夜。另外，那个舌吻是什么意思，Muto拿着核弹往生殖器那里蹭这段又是个什么意思？</p>

<p>日本博士千叮咛万嘱咐说别用核弹让自然来做制衡，结果被我们将军毅然决然的拒绝了，毕竟以前用的是鞭炮嘛。可既然是用来做诱饵的，那至少也得保证诱饵没有那么容易就被拿去蹭自己吧。然后，现实立马就给了将军重重一击。这个时候将军猛然发现，完了完了炸弹还没关呢。本是为了引诱Muto出来解救市民，现在很可能市民会死于友军火力。哎，人类在这场神级别的怪兽斗争中果然是用来搞笑的。</p>

<p>算了，还是得说说本片优秀的地方吧，也不能老盯着槽点不放。</p>

<p>首先效果非常棒，我去UME看的，大哥嘶吼的场景确实震慑人心。影片一反以往怪兽神龙见首不见尾的习惯，让观众清晰的看到了神级怪兽的全貌，在我看来这也算是一种突破。Godzilla这部电影代表了一代人的回忆，相比Pacific Rim中的怪兽（虽然这是部机甲片），Godzilla明显抢眼多了。我小的时候看过前一个版本的Godzilla，在那个年代，看到这么大的一个怪兽就横空出现，那种震撼大人也觉得非凡更何况幼小的我。所以导演在大哥形象的改善上可能是有意为之，不再是单纯的破坏者，而变成了拯救者。片中也有暗示，称大哥为城市保卫者。看到这里，你还会对大哥只是单纯的觉得恐怖吗，难道没有感觉到略微变得可爱起来的转变吗？</p>

<p>另外人类战士背负使命跳入炼狱般的格斗现场，这场戏真的很好的营造了悲壮感。在明知极其危险且没有B计划的情况下，战士们毅然选择奔赴前方，他们是人类的英雄。文章前面所引用的海报就由这个场景而来，一道道划破天际的红线我觉得挺美的。</p>

<p>总体而言剧情虽然较弱，电影总体评分可能也不会太高，但是依旧值得一看。没看演员阵容，老白一出场那会儿真是颇感意外。不过毒师这次是单独行动，也不知道小粉最近在忙啥。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spain's First Match of 2014 World Cup]]></title>
    <link href="http://blog.codinghonor.com/2014/06/14/spains-first-match/"/>
    <updated>2014-06-14T15:55:02+08:00</updated>
    <id>http://blog.codinghonor.com/2014/06/14/spains-first-match</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/casillas.jpg"></p>

<p><em>I didn&rsquo;t do things like I should have, especially to start a World Cup. &ndash; Casillas</em></p>

<p><em>When a team loses a match it&rsquo;s not just the performance of one single player, its a weakness in the total squad. &ndash; De Bosque</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[John Carmack Said]]></title>
    <link href="http://blog.codinghonor.com/2014/05/20/john-carmack/"/>
    <updated>2014-05-20T18:57:39+08:00</updated>
    <id>http://blog.codinghonor.com/2014/05/20/john-carmack</id>
    <content type="html"><![CDATA[<blockquote><p><em>Focused, hard work is the real key to success. Keep your eyes on the goal, and just keep taking the next step towards completing it. If you aren&rsquo;t sure which way to do something, do it both ways and see which works better.</em></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CodeSync]]></title>
    <link href="http://blog.codinghonor.com/2014/05/06/codesync/"/>
    <updated>2014-05-06T00:56:33+08:00</updated>
    <id>http://blog.codinghonor.com/2014/05/06/codesync</id>
    <content type="html"><![CDATA[<p>CMVC这个上古神兽网络上资料本来就非常少，更别提对应的Eclipse插件相关的文档记录了。为了找到CMVC在哪里保存着文件修改状态，扫描了整个工程目录，通过比对修改时间最终竟还真找到了。</p>

<p>最终成型的CodeSync客户端如下，JavaScript实现。</p>

<p><img src="http://blog.codinghonor.com/images/2014/codesync.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如烟往事不可捉摸]]></title>
    <link href="http://blog.codinghonor.com/2014/04/12/intangible-past/"/>
    <updated>2014-04-12T01:07:16+08:00</updated>
    <id>http://blog.codinghonor.com/2014/04/12/intangible-past</id>
    <content type="html"><![CDATA[<p>这几天在读章诒和的<a href="http://book.douban.com/subject/1059336/" target="_blank">《往事并不如烟》</a>，刚读完前几页就觉得眼界大开。原来在最困难的年代，也并非所有人的生活都是<a href="http://book.douban.com/subject/3239549/" target="_blank">《夹边沟记事》</a>中的那样。以前只知存在差距，但并不知其非常巨大。</p>

<p>读的过程中，一直有种挣扎的心理反复出现。一方面非常敬佩书中一些人，觉得这批人才是这个民族的传承与希望。另一方面，又怀疑这种强烈主观的叙述方式对于作品本身到底好吗？换句话说，这样写对前面那批人的故事的可信度会不会有影响？在可信度受到影响的情况下，原本产生的敬佩之情是不是应该，这都着实令我分心。</p>

<p>客观评价，我觉得章先生的这本书还是写的非常好的。文笔自不必说，单是这份记录，也会使那段历史不至于如烟般散去。即便有人觉得这是一个右派受害者的控诉，难免会有存在一些主观看法。不过，有些事，对就是对，错就是错，无论书写者立场如何都不能使其改变。多一份记录还能使我们有机会从字里行间读到一些历史，记录多了相互印证，更有助于我们还原历史的真实。更何况无论你境况好坏，只要受到迫害，那都是有权利控诉的。</p>

<p>但正如做人一般，人有格局大小之分，文章也有境界高低之别。特别是这种回忆类文章，如果真实性因为个人感情的代入而受到影响，那文章的境界就会大打折扣。而且章先生也是经历过文化大革命的人，应深知这文字上的是非之甚。梁文道对章的评价我就觉得挺中肯：“章诒和这个人的性格比较直率坦白，他写的文章非常有我，也就是说他很喜欢把自己怎么样被感动了、哭了这些东西都直接写进去，那大概我这个人性情比较孤僻，就比较冷漠一点，看到这样的文字就总觉得与我自己性情不太合。”</p>

<p>其实这方面我最欣赏两个人，一是杨显惠，一是唐德刚。杨显惠的《夹边沟记事》每篇故事都触目惊心，但他就能很好的保持自己与故事之间的距离，不煽情不代入不引导，让读者自行去体会这些文字后面的悲凉。科班出身的唐德刚就更是了得，为胡适写口述传记，即便有师生关系也能从中跳出来，客观的写出大师的局限性。格局境界立判高下。</p>

<p>如烟往事不可捉摸，但至少应尽力使之言之凿凿。这便是我读完此书后所学到的教训。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[凯风快晴]]></title>
    <link href="http://blog.codinghonor.com/2014/03/28/red-fuji/"/>
    <updated>2014-03-28T07:46:27+08:00</updated>
    <id>http://blog.codinghonor.com/2014/03/28/red-fuji</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/red-fuji.jpg"></p>

<p>葛饰北斋 (1760-1849)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[神奈川冲浪里]]></title>
    <link href="http://blog.codinghonor.com/2014/03/26/the-great-wave-of-kanagawa/"/>
    <updated>2014-03-26T21:16:01+08:00</updated>
    <id>http://blog.codinghonor.com/2014/03/26/the-great-wave-of-kanagawa</id>
    <content type="html"><![CDATA[<p><img src="http://blog.codinghonor.com/images/2014/the-great-wave-of-kanagawa.jpg"></p>

<p>葛饰北斋 (1760-1849)</p>
]]></content>
  </entry>
  
</feed>
